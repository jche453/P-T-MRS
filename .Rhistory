#####################################
##############STEP ONE###############
#####################################
### Generate co-methylated regions ###
# install.packages("comeback_0.1.0.tar.gz", repos = NULL, type="source")
#comeback_0.1.0.tar.gz can be found at https://bitbucket.org/flopflip/comeback.
library(comeback)
source(MRS_func.R)
load("betas_test.RData")
cmrs <- cmr(Mdata = res, corlo = 0.3)
##########################################################
###Run cmr function to generate Co-methylation regions####
##########################################################
### Generate co-methylated regions ###
# install.packages("comeback_0.1.0.tar.gz", repos = NULL, type="source")
#comeback_0.1.0.tar.gz can be found at https://bitbucket.org/flopflip/comeback.
library(comeback)
source(MRS_func.R)
getwd()
ls()
list.files()
source(MRS_func.R)
source("MRS_func.R")
load("betas_test.RData")
cmrs <- cmr(Mdata = res, corlo = 0.3)
View(res)
cmrs <- cmr(Mdata = res, corlo = 0.3)
View(res)
View(res)
res = t(res) #column are CpG sites, rows are for samples
cmrs <- cmr(Mdata = res, corlo = 0.3)
View(res)
# To generate Co-methylation regions dataframe for later analysis,
# you can either input cmrs calculated from your own dataset,
CoMeRegion = GenCoMeRegion(cmrs = cmrs, beta = res, Overlap = F)
load("~/Desktop/HuelsLab/01-PT-MRS/Pruning-Thresholding-MRS/CMR.test.RData")
# To generate Co-methylation regions dataframe for later analysis,
# you can either input cmrs calculated from your own dataset,
CoMeRegion = GenCoMeRegion(cmrs = cmrs, beta = res, Overlap = F)
save(CoMeRegion, file = "CoMeRegion.rda")
#####################################
##############STEP TWO###############
#####################################
### Calculate MRS
library(dplyr)
library(robustHD)
# Load real phenotype and methylation data
DNAm_all = get(load("betas_test.RData"))
View(DNAm_all)
# Load real phenotype and methylation data
DNAm = get(load("betas_test.RData"))
DNAm[1:6,1:6] #check DNAm file
DNAm = t(DNAm)
DNAm[1:6,1:6] #check DNAm file
###Load smoking summary statistics (newborn)
SS_newborn <- read.csv("SmokingSS_newborn_pace.csv")
###Load smoking summary statistics (newborn)
SS_newborn <- read.csv("SmokingSS_Adults_CHARGE.csv")
View(SS_newborn)
#The summary statistics file should have at least four columns: CpGs names, beta coefficient,
#standand errors and p-values
SS = SS_newborn[,c(1,2,3,4)]
#change the columns according to your dataset, 1st: CpGs, 2nd: coefficients, 3rd: SE and 4th: p-value
#Rename the column names as "Marker", "BETA" and "Pvalue"
colnames(SS) = c("Marker", "BETA", "SE", "Pvalue")
head(SS)
#Get the smallest p-value
minpvalue = min(SS$Pvalue)
minpvalue = sapply(strsplit(as.character(minpvalue), "-"), "[", 2)
###Load Co-methylation regions for newborns -> CoMeRegion
load("CoMeRegion.rda")
#Specify how p-value threshold, for example, if you want 5 * 10 ^ (-2), specify pthread to be 2
Pthred = 2:minpvalue
minpvalue
#Get the smallest p-value
minpvalue = min(SS$Pvalue)
minpvalue
#Get the smallest p-value
minpvalue = min(SS$Pvalue[SS$Pvalue != 0])
minpvalue
minpvalue = sapply(strsplit(as.character(minpvalue), "-"), "[", 2)
###Load Co-methylation regions for newborns -> CoMeRegion
load("CoMeRegion.rda")
#Specify how p-value threshold, for example, if you want 5 * 10 ^ (-2), specify pthread to be 2
Pthred = 2:minpvalue
MRS = GenMRS(DNAm, SS, Pthred, CoMeRegion, CoMeBack = T, weightSE = F)
#if weightSE = T, weights = BETA/SE, where BETA is the effect size
#Basic information of MRS
write.csv(MRS$pvalueinfo, "MRS_pvalueinfo.csv")
#if weightSE = T, weights = BETA/SE, where BETA is the effect size
#Basic information of MRS
write.csv(MRS$pvalueinfo, "MRS_pvalueinfo.csv", row.names = F)
write.csv(MRS$MRS, "MRS_smoking_newborn_PT.csv")
write.csv(MRS$MRS, "MRS.csv")
write.csv(MRS$MRS, "MRS.csv", row.names = F)
head(MRS)
MRS$ID
#####################################
##############STEP THREE#############
#####################################
#Read MRS file
MRs = read.csv("MRS.csv")
#####################################
##############STEP THREE#############
#####################################
#Read MRS file
MRS = read.csv("MRS.csv")
MRS$ID
pheno = data.frame(ID = MRS$ID, pheno = sample(c(0,1), 10))
pheno = data.frame(ID = MRS$ID, pheno = sample(c(0,1), 10, replace = "FALSE"))
pheno = data.frame(ID = MRS$ID, pheno = sample(c(0,1), 10, replace = F))
pheno = data.frame(ID = MRS$ID, pheno = sample(c(0,1), 10, replace = T))
View(pheno)
write.csv(pheno, "pheno.csv", row.names = F)
#Compare prediction performance of MRS and select the optimized MRS
#Load phenotype
pheno = read.csv("pheno.csv")
pheno = pheno[,c("SampleID","pheno")]
pheno = pheno[,c("ID","pheno")]
head(pheno)
#pheno needs to have at least one column called "ID" that matches beta file's rownames,
#and another column called "pheno" for phenotype (e.g. prenatal smoking)
colnames(pheno) = c("ID", "pheno")
#Merge MRS data and Phenotype data
MRS_Pheno = merge(MRS$MRS, pheno, by = "ID")
#Merge MRS data and Phenotype data
MRS_Pheno = merge(MRS, pheno, by = "ID")
View(MRS_Pheno)
#Prediction performance of all MRS would be saved in CorResults
CorResults = matrix(NA, ncol(MRS$MRS)-1, 1)
#Prediction performance of all MRS would be saved in CorResults
CorResults = matrix(NA, ncol(MRS)-1, 1)
rownames(CorResults) = colnames(MRS)[-1]
for (j in 2:ncol(MRS)){
CorResults[(j-1),1] = cor(MRS_Pheno[,j], MRS_Pheno$pheno, use = "complete")^2
}
View(CoMeRegion)
View(CorResults)
CorResults = data.frame(CorResults)
colnames(CorResults) = "R2"
#Maximum prediction
max(CorResults)
#P-value threshold that leads to maximum prediction
MaxPNumber = which(CorResults == max(CorResults))
MaxPNumber
rownames(CorResults)[MaxPNumber] #"P5e-23" and "P5e-22"
#Plot figures
library(ggplot2)
CorResults[,"Pvalue"] = -log10(as.numeric(sapply(strsplit(rownames(CorResults), "P"), "[", 2))/5)
ggplot(aes(x = Pvalue, y = R2), data = CorResults) +
geom_line(size = 1.3)+
geom_point() +
scale_y_continuous(name="Prediction accuracy") +
scale_x_continuous(name = "-log10(P-value/5)") +
scale_color_brewer(palette="Paired") +
ggtitle("") +
theme( plot.title = element_text(family = "Times", face = "bold", size = 28, hjust = 0.5), #Adjusts the text properties of the plot title
axis.title = element_text(family = "Times", face = "bold", size = 24), #Adjusts the text properties of the axis titles
text = element_text(size = 20), #Adjusts the size of the x-axis items
axis.line = element_line(colour = "black"), #Adds axis lines in black color
panel.background = element_blank(), #Removes gray background
axis.ticks = element_blank(), #Removes axis tick marks
legend.title = element_blank(),
legend.position = "bottom"
)
CorResults
#Prediction performance of all MRS would be saved in CorResults
CorResults = matrix(NA, ncol(MRS)-1, 1)
rownames(CorResults) = colnames(MRS)[-1]
for (j in 2:ncol(MRS)){
CorResults[(j-1),1] = cor(MRS_Pheno[,j], MRS_Pheno$pheno, use = "complete")^2
}
CorResults = data.frame(CorResults)
colnames(CorResults) = "R2"
#Maximum prediction
max(CorResults)
#P-value threshold that leads to maximum prediction
MaxPNumber = which(CorResults == max(CorResults))
MaxPNumber
rownames(CorResults)[MaxPNumber] #"P5e-23" and "P5e-22"
View(CoMeRegion)
View(CorResults)
CorResults[,"Pvalue"]
rownames(CorResults)
-log10(as.numeric(sapply(strsplit(rownames(CorResults), "P"), "[", 2))/5)
strsplit(rownames(CorResults)
, "P")
as.numeric(5e.04)
as.numeric("5e.04")
View(CorResults)
sapply(strsplit(rownames(CorResults)
, "P")
, "[", 2)
sapply(strsplit(rownames(CorResults), "P5e."), "[", 2)
as.numeric(sapply(strsplit(rownames(CorResults), "P5e."), "[", 2))
is.na(CorResults$Pvalue)
CorResults$Pvalue
CorResults[,"Pvalue"] = as.numeric(sapply(strsplit(rownames(CorResults), "P5e."), "[", 2))
is.na(CorResults$Pvalue)
CorResults[is.na(CorResults$Pvalue),"Pvalue"]
CorResults[is.na(CorResults$Pvalue),"Pvalue"] = -log10(as.numeric(sapply(strsplit(rownames(CorResults)[is.na(CorResults$Pvalue)], "P"), "[", 2))/5)
View(CorResults)
ggplot(aes(x = Pvalue, y = R2), data = CorResults) +
geom_line(size = 1.3)+
geom_point() +
scale_y_continuous(name="Prediction accuracy") +
scale_x_continuous(name = "-log10(P-value/5)") +
scale_color_brewer(palette="Paired") +
ggtitle("") +
theme( plot.title = element_text(family = "Times", face = "bold", size = 28, hjust = 0.5), #Adjusts the text properties of the plot title
axis.title = element_text(family = "Times", face = "bold", size = 24), #Adjusts the text properties of the axis titles
text = element_text(size = 20), #Adjusts the size of the x-axis items
axis.line = element_line(colour = "black"), #Adds axis lines in black color
panel.background = element_blank(), #Removes gray background
axis.ticks = element_blank(), #Removes axis tick marks
legend.title = element_blank(),
legend.position = "bottom"
)
ggsave("CorResults.png", plot = last_plot())
ggsave("CorResults.png", plot = last_plot(), height = 6, width = 6)
